# 面向对象的特征方面有哪些?

1.抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一
       部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。
       (抽象方法是一种没有实现的方法，在应用程序中使用抽象类的唯一方法是继承这个类。它的子类如果不能再次声明抽象，那么可以实例化。子类继承
       超类的行为，子类可以实现抽象方法)
       
2.继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称
       为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法
       和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。    
       
3.封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、
       封装的对象，这些对象通过一个受保护的接口访问其他对象。 (将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的
       方法实现对隐藏信息的操作和访问)

4.多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的
         优势，很好的解决了应用程序函数同名问题。
         Animal obj1 = new Animal();   //父类的引用可以指向本类的对象
         Animal obj2  = new Dog();     //父类的引用也可以指向子类的对象

# 抽象类和接口间的关系

1.

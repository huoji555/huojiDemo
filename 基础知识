# 面向对象的特征方面有哪些?

1.抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一
       部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。
       (抽象方法是一种没有实现的方法，在应用程序中使用抽象类的唯一方法是继承这个类。它的子类如果不能再次声明抽象，那么可以实例化。子类继承
       超类的行为，子类可以实现抽象方法)
       
2.继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称
       为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法
       和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。    
       
3.封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、
       封装的对象，这些对象通过一个受保护的接口访问其他对象。 (将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的
       方法实现对隐藏信息的操作和访问)

4.多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的
         优势，很好的解决了应用程序函数同名问题。
         Animal obj1 = new Animal();   //父类的引用可以指向本类的对象
         Animal obj2  = new Dog();     //父类的引用也可以指向子类的对象



# 抽象类和接口间的关系

1. 接口所有方法都具有public 和abstract。

2. 接口不能有完全定义的方法。根据定义，接口仅用于提供契约。
    抽象类可以有非抽象的方法，没有任何限制。您可以使用任何非抽象方法的关键字，就像在其他类中一样。

3. 任何抽象类可以用extends关键字继承抽象类，用implements关键字实现接口。
    一个类只能继承一个类，但可以实现任意数量的接口。Java用此特性模拟多继承。(抽象类只能实现一次，接口可多次实现)

4. 接口是完全抽象的，不能被实例化；Java抽象类也不能实例化，但可以被调用，如果main()存在。



# String是最基本的数据类型吗?

  基本数据类型包括byte、int、char、long、float、double、boolean和short  //数值型，字符型，布尔型 （这些存储时存储数据本身）
  java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类
  所以String不是最基本的数据类型，而是引用数据类型，与此类似的还有 类 接口 数组  （这些存储时存储的是数据的空间地址）



# int 和 Integer 有什么区别

  java中提供两种数据类型分别为 基本数据类型（int,byte,short,long...） 引用数据类型 (Integer String Double)
  int 是 java 的原始数据类型, Integer 是 java 为 int 提供的封装类    //Java为每个原始类型提供了封装类
  
  原始类型封装类booleanBoolean  charCharacter  byteByte  shortShort  intInteger  longLong  floatFloat  doubleDouble
  
  引用类型和原始类型的行为完全不同，并且他们具有不同的意义，引用类型和原始类型具有不同的特征和用法，包括 1.大小和速度问题，2.这种类型
  以哪种类型的数据结构存储  3.当引用类型和原始类型用作某个类的实例数据时所指定的缺省值 
  //对象引用实例变量的缺省值为null，原始数据引用实例变量的缺省值跟原始数据的具体类型有关




